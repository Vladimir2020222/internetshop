"""Order, Warehouse, DeliveryCar models are created. Added CheckConstraint on product_cart to check if amount is positive

Revision ID: aecd0094aeb1
Revises: 103f762aced6
Create Date: 2024-09-09 15:57:35.064930

"""
from typing import Sequence, Union

import geoalchemy2
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = 'aecd0094aeb1'
down_revision: Union[str, None] = '103f762aced6'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('delivery_cars',
    sa.Column('uuid', sa.Uuid(), server_default=sa.text('gen_random_uuid()'), nullable=False),
    sa.PrimaryKeyConstraint('uuid')
    )
    op.create_table('warehouses',
    sa.Column('uuid', sa.Uuid(), server_default=sa.text('gen_random_uuid()'), nullable=False),
    sa.Column('address', geoalchemy2.types.Geometry(geometry_type='POINT', srid=4326, from_text='ST_GeomFromEWKT', name='geometry', nullable=False), nullable=False),
    sa.PrimaryKeyConstraint('uuid')
    )
    # op.create_index('idx_warehouses_address', 'warehouses', ['address'], unique=False, postgresql_using='gist')
    op.create_table('orders',
    sa.Column('uuid', sa.Uuid(), server_default=sa.text('gen_random_uuid()'), nullable=False),
    sa.Column('user_uuid', sa.Uuid(), nullable=False),
    sa.Column('status', sa.Enum('collecting', 'delivering', 'done', 'canceled', 'returning', 'returned', name='orderstatus'), nullable=False),
    sa.Column('price', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('NOW()'), nullable=False),
    sa.Column('deliver_address', geoalchemy2.types.Geometry(geometry_type='POINT', srid=4326, from_text='ST_GeomFromEWKT', name='geometry', nullable=False), nullable=False),
    sa.Column('charge_id', sa.String(length=100), nullable=False),
    sa.Column('warehouse_uuid', sa.Uuid(), nullable=False),
    sa.Column('delivery_car_uuid', sa.Uuid(), nullable=True),
    sa.ForeignKeyConstraint(['delivery_car_uuid'], ['delivery_cars.uuid'], name='orders_delivery_car_uuid_fkey', ondelete='RESTRICT'),
    sa.ForeignKeyConstraint(['user_uuid'], ['users.uuid'], name='orders_user_uuid_fkey', ondelete='RESTRICT'),
    sa.ForeignKeyConstraint(['warehouse_uuid'], ['warehouses.uuid'], name='orders_warehouse_uuid_fkey', ondelete='RESTRICT'),
    sa.PrimaryKeyConstraint('uuid')
    )
    # op.create_index('idx_orders_deliver_address', 'orders', ['deliver_address'], unique=False, postgresql_using='gist')
    op.create_table('product_warehouse',
    sa.Column('product_uuid', sa.Uuid(), nullable=False),
    sa.Column('warehouse_uuid', sa.Uuid(), nullable=False),
    sa.Column('amount', sa.Integer(), nullable=False),
    sa.CheckConstraint('amount >= 0', name='check_product_warehouse_amount_positive'),
    sa.ForeignKeyConstraint(['product_uuid'], ['products.uuid'], name='product_warehouse_product_uuid_fkey', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['warehouse_uuid'], ['warehouses.uuid'], name='product_warehouse_warehouse_uuid_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('product_uuid', 'warehouse_uuid')
    )
    op.create_table('product_order',
    sa.Column('product_uuid', sa.Uuid(), nullable=False),
    sa.Column('order_uuid', sa.Uuid(), nullable=False),
    sa.Column('amount', sa.Integer(), nullable=False),
    sa.CheckConstraint('amount >= 0', name='check_product_order_amount_positive'),
    sa.ForeignKeyConstraint(['order_uuid'], ['orders.uuid'], name='product_order_order_uuid_fkey', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['product_uuid'], ['products.uuid'], name='product_order_product_uuid_fkey', ondelete='RESTRICT'),
    sa.PrimaryKeyConstraint('product_uuid', 'order_uuid')
    )
    op.add_column('users', sa.Column('warehouse_uuid', sa.Uuid(), nullable=True))
    op.add_column('users', sa.Column('delivery_car_uuid', sa.Uuid(), nullable=True))
    op.create_foreign_key('users_delivery_car_uuid_fkey', 'users', 'delivery_cars', ['delivery_car_uuid'], ['uuid'], ondelete='RESTRICT')
    op.create_foreign_key('users_warehouse_uuid_fkey', 'users', 'warehouses', ['warehouse_uuid'], ['uuid'], ondelete='RESTRICT')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint('users_warehouse_uuid_fkey', 'users', type_='foreignkey')
    op.drop_constraint('users_delivery_car_uuid_fkey', 'users', type_='foreignkey')
    op.drop_column('users', 'delivery_car_uuid')
    op.drop_column('users', 'warehouse_uuid')
    op.drop_table('product_order')
    op.drop_table('product_warehouse')
    op.drop_index('idx_orders_deliver_address', table_name='orders', postgresql_using='gist')
    op.drop_table('orders')
    op.drop_index('idx_warehouses_address', table_name='warehouses', postgresql_using='gist')
    op.drop_table('warehouses')
    op.drop_table('delivery_cars')
    op.execute('DROP TYPE orderstatus')
    # ### end Alembic commands ###
