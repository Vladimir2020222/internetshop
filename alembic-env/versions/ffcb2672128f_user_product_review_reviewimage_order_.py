"""User, Product, Review, ReviewImage, Order, Warehouse and DeliveryCar models created

Revision ID: ffcb2672128f
Revises: 
Create Date: 2024-09-10 18:22:20.740308

"""
from typing import Sequence, Union

import geoalchemy2
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'ffcb2672128f'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('delivery_cars',
    sa.Column('uuid', sa.Uuid(), server_default=sa.text('gen_random_uuid()'), nullable=False),
    sa.PrimaryKeyConstraint('uuid')
    )
    op.create_table('product_types',
    sa.Column('uuid', sa.Uuid(), server_default=sa.text('gen_random_uuid()'), nullable=False),
    sa.Column('parent_uuid', sa.Uuid(), nullable=True),
    sa.Column('title', sa.String(length=80), nullable=False),
    sa.ForeignKeyConstraint(['parent_uuid'], ['product_types.uuid'], name='product_type_product_type_uuid_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('uuid')
    )
    op.create_table('warehouses',
    sa.Column('uuid', sa.Uuid(), server_default=sa.text('gen_random_uuid()'), nullable=False),
    sa.Column('address', geoalchemy2.types.Geometry(geometry_type='POINT', srid=4326, from_text='ST_GeomFromEWKT', name='geometry', nullable=False), nullable=False),
    sa.PrimaryKeyConstraint('uuid')
    )
    op.create_table('products',
    sa.Column('uuid', sa.Uuid(), server_default=sa.text('gen_random_uuid()'), nullable=False),
    sa.Column('price', sa.Integer(), nullable=False),
    sa.Column('title', sa.String(length=300), nullable=False),
    sa.Column('description', sa.String(length=5000), nullable=False),
    sa.Column('characteristics', sa.JSON(), nullable=True),
    sa.Column('discount', sa.Integer(), server_default=sa.text('0'), nullable=False),
    sa.Column('type_uuid', sa.Uuid(), nullable=False),
    sa.Column('search_vector', postgresql.TSVECTOR(), nullable=True),
    sa.ForeignKeyConstraint(['type_uuid'], ['product_types.uuid'], name='products_product_types_uuid_fkey', ondelete='RESTRICT'),
    sa.PrimaryKeyConstraint('uuid')
    )
    op.create_table('users',
    sa.Column('uuid', sa.Uuid(), server_default=sa.text('gen_random_uuid()'), nullable=False),
    sa.Column('full_name', sa.String(length=120), nullable=False),
    sa.Column('email', sa.String(length=320), nullable=True),
    sa.Column('password_hash', sa.String(), nullable=False),
    sa.Column('role', sa.Enum('customer', 'support', 'warehouse_worker', 'courier', 'manager', name='userrole'), server_default=sa.text("'customer'"), nullable=False),
    sa.Column('warehouse_uuid', sa.Uuid(), nullable=True),
    sa.Column('delivery_car_uuid', sa.Uuid(), nullable=True),
    sa.ForeignKeyConstraint(['delivery_car_uuid'], ['delivery_cars.uuid'], name='users_delivery_car_uuid_fkey', ondelete='RESTRICT'),
    sa.ForeignKeyConstraint(['warehouse_uuid'], ['warehouses.uuid'], name='users_warehouse_uuid_fkey', ondelete='RESTRICT'),
    sa.PrimaryKeyConstraint('uuid'),
    sa.UniqueConstraint('email')
    )
    op.create_table('orders',
    sa.Column('uuid', sa.Uuid(), server_default=sa.text('gen_random_uuid()'), nullable=False),
    sa.Column('user_uuid', sa.Uuid(), nullable=False),
    sa.Column('status', sa.Enum('collecting', 'delivering', 'done', 'canceled', 'returning', 'returned', name='orderstatus'), nullable=False),
    sa.Column('price', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('NOW()'), nullable=False),
    sa.Column('deliver_address', geoalchemy2.types.Geometry(geometry_type='POINT', srid=4326, from_text='ST_GeomFromEWKT', name='geometry', nullable=False), nullable=False),
    sa.Column('charge_id', sa.String(length=100), nullable=False),
    sa.Column('warehouse_uuid', sa.Uuid(), nullable=False),
    sa.Column('delivery_car_uuid', sa.Uuid(), nullable=True),
    sa.ForeignKeyConstraint(['delivery_car_uuid'], ['delivery_cars.uuid'], name='orders_delivery_car_uuid_fkey', ondelete='RESTRICT'),
    sa.ForeignKeyConstraint(['user_uuid'], ['users.uuid'], name='orders_user_uuid_fkey', ondelete='RESTRICT'),
    sa.ForeignKeyConstraint(['warehouse_uuid'], ['warehouses.uuid'], name='orders_warehouse_uuid_fkey', ondelete='RESTRICT'),
    sa.PrimaryKeyConstraint('uuid')
    )
    op.create_table('product_user',
    sa.Column('product_uuid', sa.Uuid(), nullable=False),
    sa.Column('user_uuid', sa.Uuid(), nullable=False),
    sa.Column('amount', sa.Integer(), nullable=False),
    sa.CheckConstraint('amount >= 0', name='check_product_user_amount_positive'),
    sa.ForeignKeyConstraint(['product_uuid'], ['products.uuid'], name='product_user_product_uuid_fkey', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_uuid'], ['users.uuid'], name='product_user_user_uuid_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('product_uuid', 'user_uuid')
    )
    op.create_table('product_warehouse',
    sa.Column('product_uuid', sa.Uuid(), nullable=False),
    sa.Column('warehouse_uuid', sa.Uuid(), nullable=False),
    sa.Column('amount', sa.Integer(), nullable=False),
    sa.CheckConstraint('amount >= 0', name='check_product_warehouse_amount_positive'),
    sa.ForeignKeyConstraint(['product_uuid'], ['products.uuid'], name='product_warehouse_product_uuid_fkey', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['warehouse_uuid'], ['warehouses.uuid'], name='product_warehouse_warehouse_uuid_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('product_uuid', 'warehouse_uuid')
    )
    op.create_table('reviews',
    sa.Column('uuid', sa.Uuid(), server_default=sa.text('gen_random_uuid()'), nullable=False),
    sa.Column('product_uuid', sa.Uuid(), nullable=False),
    sa.Column('author_uuid', sa.Uuid(), nullable=False),
    sa.Column('text', sa.String(length=1000), nullable=False),
    sa.Column('rate', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['author_uuid'], ['users.uuid'], name='reviews_author_uuid_fkey', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['product_uuid'], ['products.uuid'], name='reviews_product_uuid_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('uuid'),
    sa.UniqueConstraint('product_uuid', 'author_uuid', name='product_author_unique')
    )
    op.create_table('user_favorite_products',
    sa.Column('user_uuid', sa.Uuid(), nullable=False),
    sa.Column('product_uuid', sa.Uuid(), nullable=False),
    sa.ForeignKeyConstraint(['product_uuid'], ['products.uuid'], name='user_favorite_products_product_uuid_fkey', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_uuid'], ['users.uuid'], name='user_favorite_products_user_uuid_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('user_uuid', 'product_uuid')
    )
    op.create_table('product_order',
    sa.Column('product_uuid', sa.Uuid(), nullable=False),
    sa.Column('order_uuid', sa.Uuid(), nullable=False),
    sa.Column('amount', sa.Integer(), nullable=False),
    sa.CheckConstraint('amount >= 0', name='check_product_order_amount_positive'),
    sa.ForeignKeyConstraint(['order_uuid'], ['orders.uuid'], name='product_order_order_uuid_fkey', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['product_uuid'], ['products.uuid'], name='product_order_product_uuid_fkey', ondelete='RESTRICT'),
    sa.PrimaryKeyConstraint('product_uuid', 'order_uuid')
    )
    op.create_table('reviews_images',
    sa.Column('uuid', sa.Uuid(), server_default=sa.text('gen_random_uuid()'), nullable=False),
    sa.Column('review_uuid', sa.Uuid(), nullable=False),
    sa.Column('path', sa.String(), nullable=False),
    sa.ForeignKeyConstraint(['review_uuid'], ['reviews.uuid'], name='reviews_images_review_uuid_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('uuid')
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('reviews_images')
    op.drop_table('product_order')
    op.drop_table('user_favorite_products')
    op.drop_table('reviews')
    op.drop_table('product_warehouse')
    op.drop_table('product_user')
    op.drop_table('orders')
    op.drop_table('users')
    op.drop_table('products')
    op.drop_table('warehouses')
    op.drop_table('product_types')
    op.drop_table('delivery_cars')
    op.execute('DROP TYPE orderstatus')
    op.execute('DROP TYPE userrole')
    # ### end Alembic commands ###
